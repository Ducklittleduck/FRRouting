/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: lib/mgmt.proto */

#ifndef PROTOBUF_C_lib_2fmgmt_2eproto__INCLUDED
#define PROTOBUF_C_lib_2fmgmt_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Mgmtd__YangDataXPath Mgmtd__YangDataXPath;
typedef struct _Mgmtd__YangDataValue Mgmtd__YangDataValue;
typedef struct _Mgmtd__YangData Mgmtd__YangData;
typedef struct _Mgmtd__YangCfgDataReq Mgmtd__YangCfgDataReq;
typedef struct _Mgmtd__YangGetDataReq Mgmtd__YangGetDataReq;
typedef struct _Mgmtd__BeSubscribeReq Mgmtd__BeSubscribeReq;
typedef struct _Mgmtd__BeSubscribeReply Mgmtd__BeSubscribeReply;
typedef struct _Mgmtd__BeTxnReq Mgmtd__BeTxnReq;
typedef struct _Mgmtd__BeTxnReply Mgmtd__BeTxnReply;
typedef struct _Mgmtd__BeCfgDataCreateReq Mgmtd__BeCfgDataCreateReq;
typedef struct _Mgmtd__BeCfgDataCreateReply Mgmtd__BeCfgDataCreateReply;
typedef struct _Mgmtd__BeCfgDataApplyReq Mgmtd__BeCfgDataApplyReq;
typedef struct _Mgmtd__BeCfgDataApplyReply Mgmtd__BeCfgDataApplyReply;
typedef struct _Mgmtd__YangDataReply Mgmtd__YangDataReply;
typedef struct _Mgmtd__BeMessage Mgmtd__BeMessage;
typedef struct _Mgmtd__FeRegisterReq Mgmtd__FeRegisterReq;
typedef struct _Mgmtd__FeSessionReq Mgmtd__FeSessionReq;
typedef struct _Mgmtd__FeSessionReply Mgmtd__FeSessionReply;
typedef struct _Mgmtd__FeLockDsReq Mgmtd__FeLockDsReq;
typedef struct _Mgmtd__FeLockDsReply Mgmtd__FeLockDsReply;
typedef struct _Mgmtd__FeSetConfigReq Mgmtd__FeSetConfigReq;
typedef struct _Mgmtd__FeSetConfigReply Mgmtd__FeSetConfigReply;
typedef struct _Mgmtd__FeCommitConfigReq Mgmtd__FeCommitConfigReq;
typedef struct _Mgmtd__FeCommitConfigReply Mgmtd__FeCommitConfigReply;
typedef struct _Mgmtd__FeGetReq Mgmtd__FeGetReq;
typedef struct _Mgmtd__FeGetReply Mgmtd__FeGetReply;
typedef struct _Mgmtd__FeNotifyDataReq Mgmtd__FeNotifyDataReq;
typedef struct _Mgmtd__FeRegisterNotifyReq Mgmtd__FeRegisterNotifyReq;
typedef struct _Mgmtd__FeMessage Mgmtd__FeMessage;


/* --- enums --- */

typedef enum _Mgmtd__CfgDataReqType {
  MGMTD__CFG_DATA_REQ_TYPE__REQ_TYPE_NONE = 0,
  MGMTD__CFG_DATA_REQ_TYPE__SET_DATA = 1,
  MGMTD__CFG_DATA_REQ_TYPE__REMOVE_DATA = 2,
  MGMTD__CFG_DATA_REQ_TYPE__CREATE_DATA = 3,
  MGMTD__CFG_DATA_REQ_TYPE__DELETE_DATA = 4,
  MGMTD__CFG_DATA_REQ_TYPE__REPLACE_DATA = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMTD__CFG_DATA_REQ_TYPE)
} Mgmtd__CfgDataReqType;
typedef enum _Mgmtd__DatastoreId {
  MGMTD__DATASTORE_ID__DS_NONE = 0,
  MGMTD__DATASTORE_ID__RUNNING_DS = 1,
  MGMTD__DATASTORE_ID__CANDIDATE_DS = 2,
  MGMTD__DATASTORE_ID__OPERATIONAL_DS = 3,
  MGMTD__DATASTORE_ID__STARTUP_DS = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMTD__DATASTORE_ID)
} Mgmtd__DatastoreId;

/* --- messages --- */

struct  _Mgmtd__YangDataXPath
{
  ProtobufCMessage base;
  char *xpath;
};
#define MGMTD__YANG_DATA_XPATH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__yang_data_xpath__descriptor) \
    , NULL }


typedef enum {
  MGMTD__YANG_DATA_VALUE__VALUE__NOT_SET = 0,
  MGMTD__YANG_DATA_VALUE__VALUE_ENCODED_STR_VAL = 100
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMTD__YANG_DATA_VALUE__VALUE)
} Mgmtd__YangDataValue__ValueCase;

struct  _Mgmtd__YangDataValue
{
  ProtobufCMessage base;
  Mgmtd__YangDataValue__ValueCase value_case;
  union {
    /*
     * NOTE: For now let's use stringized value ONLY.
     * We will enhance it later to pass native-format
     * if needed.
     * bool bool_val = 2;
     * double double_val = 3;
     * float float_val = 4;
     * string string_val = 5;
     * bytes bytes_val = 6;
     * int32 int32_val = 7;
     * int64 int64_val = 8;
     * uint32 uint32_val = 9;
     * uint64 uint64_val = 10;
     * int32 int8_val = 11;
     * uint32 uint8_val = 12;
     * int32 int16_val = 13;
     * uint32 uint16_val = 14;
     */
    char *encoded_str_val;
  };
};
#define MGMTD__YANG_DATA_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__yang_data_value__descriptor) \
    , MGMTD__YANG_DATA_VALUE__VALUE__NOT_SET, {0} }


struct  _Mgmtd__YangData
{
  ProtobufCMessage base;
  char *xpath;
  Mgmtd__YangDataValue *value;
};
#define MGMTD__YANG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__yang_data__descriptor) \
    , NULL, NULL }


struct  _Mgmtd__YangCfgDataReq
{
  ProtobufCMessage base;
  Mgmtd__YangData *data;
  Mgmtd__CfgDataReqType req_type;
};
#define MGMTD__YANG_CFG_DATA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__yang_cfg_data_req__descriptor) \
    , NULL, MGMTD__CFG_DATA_REQ_TYPE__REQ_TYPE_NONE }


struct  _Mgmtd__YangGetDataReq
{
  ProtobufCMessage base;
  Mgmtd__YangData *data;
  int64_t next_indx;
};
#define MGMTD__YANG_GET_DATA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__yang_get_data_req__descriptor) \
    , NULL, 0 }


/*
 * Backend Interface Messages
 */
struct  _Mgmtd__BeSubscribeReq
{
  ProtobufCMessage base;
  char *client_name;
  size_t n_config_xpaths;
  char **config_xpaths;
  size_t n_oper_xpaths;
  char **oper_xpaths;
  size_t n_notif_xpaths;
  char **notif_xpaths;
  size_t n_rpc_xpaths;
  char **rpc_xpaths;
};
#define MGMTD__BE_SUBSCRIBE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_subscribe_req__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Mgmtd__BeSubscribeReply
{
  ProtobufCMessage base;
  protobuf_c_boolean success;
};
#define MGMTD__BE_SUBSCRIBE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_subscribe_reply__descriptor) \
    , 0 }


struct  _Mgmtd__BeTxnReq
{
  ProtobufCMessage base;
  uint64_t txn_id;
  protobuf_c_boolean create;
};
#define MGMTD__BE_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_txn_req__descriptor) \
    , 0, 0 }


struct  _Mgmtd__BeTxnReply
{
  ProtobufCMessage base;
  uint64_t txn_id;
  protobuf_c_boolean create;
  protobuf_c_boolean success;
};
#define MGMTD__BE_TXN_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_txn_reply__descriptor) \
    , 0, 0, 0 }


struct  _Mgmtd__BeCfgDataCreateReq
{
  ProtobufCMessage base;
  uint64_t txn_id;
  size_t n_data_req;
  Mgmtd__YangCfgDataReq **data_req;
  protobuf_c_boolean end_of_data;
};
#define MGMTD__BE_CFG_DATA_CREATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_cfg_data_create_req__descriptor) \
    , 0, 0,NULL, 0 }


struct  _Mgmtd__BeCfgDataCreateReply
{
  ProtobufCMessage base;
  uint64_t txn_id;
  protobuf_c_boolean success;
  char *error_if_any;
};
#define MGMTD__BE_CFG_DATA_CREATE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_cfg_data_create_reply__descriptor) \
    , 0, 0, NULL }


struct  _Mgmtd__BeCfgDataApplyReq
{
  ProtobufCMessage base;
  uint64_t txn_id;
};
#define MGMTD__BE_CFG_DATA_APPLY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_cfg_data_apply_req__descriptor) \
    , 0 }


struct  _Mgmtd__BeCfgDataApplyReply
{
  ProtobufCMessage base;
  uint64_t txn_id;
  protobuf_c_boolean success;
  char *error_if_any;
};
#define MGMTD__BE_CFG_DATA_APPLY_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_cfg_data_apply_reply__descriptor) \
    , 0, 0, NULL }


struct  _Mgmtd__YangDataReply
{
  ProtobufCMessage base;
  size_t n_data;
  Mgmtd__YangData **data;
  int64_t next_indx;
};
#define MGMTD__YANG_DATA_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__yang_data_reply__descriptor) \
    , 0,NULL, 0 }


typedef enum {
  MGMTD__BE_MESSAGE__MESSAGE__NOT_SET = 0,
  MGMTD__BE_MESSAGE__MESSAGE_SUBSCR_REQ = 2,
  MGMTD__BE_MESSAGE__MESSAGE_SUBSCR_REPLY = 3,
  MGMTD__BE_MESSAGE__MESSAGE_TXN_REQ = 4,
  MGMTD__BE_MESSAGE__MESSAGE_TXN_REPLY = 5,
  MGMTD__BE_MESSAGE__MESSAGE_CFG_DATA_REQ = 6,
  MGMTD__BE_MESSAGE__MESSAGE_CFG_DATA_REPLY = 7,
  MGMTD__BE_MESSAGE__MESSAGE_CFG_APPLY_REQ = 8,
  MGMTD__BE_MESSAGE__MESSAGE_CFG_APPLY_REPLY = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMTD__BE_MESSAGE__MESSAGE)
} Mgmtd__BeMessage__MessageCase;

/*
 * Any message on the MGMTD Backend Interface.
 */
struct  _Mgmtd__BeMessage
{
  ProtobufCMessage base;
  Mgmtd__BeMessage__MessageCase message_case;
  union {
    Mgmtd__BeSubscribeReq *subscr_req;
    Mgmtd__BeSubscribeReply *subscr_reply;
    Mgmtd__BeTxnReq *txn_req;
    Mgmtd__BeTxnReply *txn_reply;
    Mgmtd__BeCfgDataCreateReq *cfg_data_req;
    Mgmtd__BeCfgDataCreateReply *cfg_data_reply;
    Mgmtd__BeCfgDataApplyReq *cfg_apply_req;
    Mgmtd__BeCfgDataApplyReply *cfg_apply_reply;
  };
};
#define MGMTD__BE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__be_message__descriptor) \
    , MGMTD__BE_MESSAGE__MESSAGE__NOT_SET, {0} }


struct  _Mgmtd__FeRegisterReq
{
  ProtobufCMessage base;
  char *client_name;
};
#define MGMTD__FE_REGISTER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_register_req__descriptor) \
    , NULL }


typedef enum {
  MGMTD__FE_SESSION_REQ__ID__NOT_SET = 0,
  MGMTD__FE_SESSION_REQ__ID_CLIENT_CONN_ID = 2,
  MGMTD__FE_SESSION_REQ__ID_SESSION_ID = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMTD__FE_SESSION_REQ__ID)
} Mgmtd__FeSessionReq__IdCase;

struct  _Mgmtd__FeSessionReq
{
  ProtobufCMessage base;
  protobuf_c_boolean create;
  Mgmtd__FeSessionReq__IdCase id_case;
  union {
    /*
     * Applicable for create request only
     */
    uint64_t client_conn_id;
    /*
     * Applicable for delete request only
     */
    uint64_t session_id;
  };
};
#define MGMTD__FE_SESSION_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_session_req__descriptor) \
    , 0, MGMTD__FE_SESSION_REQ__ID__NOT_SET, {0} }


struct  _Mgmtd__FeSessionReply
{
  ProtobufCMessage base;
  protobuf_c_boolean create;
  protobuf_c_boolean success;
  /*
   * Applicable for create request only
   */
  protobuf_c_boolean has_client_conn_id;
  uint64_t client_conn_id;
  uint64_t session_id;
};
#define MGMTD__FE_SESSION_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_session_reply__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _Mgmtd__FeLockDsReq
{
  ProtobufCMessage base;
  uint64_t session_id;
  uint64_t req_id;
  Mgmtd__DatastoreId ds_id;
  protobuf_c_boolean lock;
};
#define MGMTD__FE_LOCK_DS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_lock_ds_req__descriptor) \
    , 0, 0, MGMTD__DATASTORE_ID__DS_NONE, 0 }


struct  _Mgmtd__FeLockDsReply
{
  ProtobufCMessage base;
  uint64_t session_id;
  uint64_t req_id;
  Mgmtd__DatastoreId ds_id;
  protobuf_c_boolean lock;
  protobuf_c_boolean success;
  char *error_if_any;
};
#define MGMTD__FE_LOCK_DS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_lock_ds_reply__descriptor) \
    , 0, 0, MGMTD__DATASTORE_ID__DS_NONE, 0, 0, NULL }


struct  _Mgmtd__FeSetConfigReq
{
  ProtobufCMessage base;
  uint64_t session_id;
  Mgmtd__DatastoreId ds_id;
  uint64_t req_id;
  size_t n_data;
  Mgmtd__YangCfgDataReq **data;
  protobuf_c_boolean implicit_commit;
  Mgmtd__DatastoreId commit_ds_id;
};
#define MGMTD__FE_SET_CONFIG_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_set_config_req__descriptor) \
    , 0, MGMTD__DATASTORE_ID__DS_NONE, 0, 0,NULL, 0, MGMTD__DATASTORE_ID__DS_NONE }


struct  _Mgmtd__FeSetConfigReply
{
  ProtobufCMessage base;
  uint64_t session_id;
  Mgmtd__DatastoreId ds_id;
  uint64_t req_id;
  protobuf_c_boolean success;
  protobuf_c_boolean implicit_commit;
  char *error_if_any;
};
#define MGMTD__FE_SET_CONFIG_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_set_config_reply__descriptor) \
    , 0, MGMTD__DATASTORE_ID__DS_NONE, 0, 0, 0, NULL }


struct  _Mgmtd__FeCommitConfigReq
{
  ProtobufCMessage base;
  uint64_t session_id;
  Mgmtd__DatastoreId src_ds_id;
  Mgmtd__DatastoreId dst_ds_id;
  uint64_t req_id;
  protobuf_c_boolean validate_only;
  protobuf_c_boolean abort;
};
#define MGMTD__FE_COMMIT_CONFIG_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_commit_config_req__descriptor) \
    , 0, MGMTD__DATASTORE_ID__DS_NONE, MGMTD__DATASTORE_ID__DS_NONE, 0, 0, 0 }


struct  _Mgmtd__FeCommitConfigReply
{
  ProtobufCMessage base;
  uint64_t session_id;
  Mgmtd__DatastoreId src_ds_id;
  Mgmtd__DatastoreId dst_ds_id;
  uint64_t req_id;
  protobuf_c_boolean validate_only;
  protobuf_c_boolean success;
  protobuf_c_boolean abort;
  char *error_if_any;
};
#define MGMTD__FE_COMMIT_CONFIG_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_commit_config_reply__descriptor) \
    , 0, MGMTD__DATASTORE_ID__DS_NONE, MGMTD__DATASTORE_ID__DS_NONE, 0, 0, 0, 0, NULL }


struct  _Mgmtd__FeGetReq
{
  ProtobufCMessage base;
  uint64_t session_id;
  protobuf_c_boolean config;
  Mgmtd__DatastoreId ds_id;
  uint64_t req_id;
  size_t n_data;
  Mgmtd__YangGetDataReq **data;
};
#define MGMTD__FE_GET_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_get_req__descriptor) \
    , 0, 0, MGMTD__DATASTORE_ID__DS_NONE, 0, 0,NULL }


struct  _Mgmtd__FeGetReply
{
  ProtobufCMessage base;
  uint64_t session_id;
  protobuf_c_boolean config;
  Mgmtd__DatastoreId ds_id;
  uint64_t req_id;
  protobuf_c_boolean success;
  char *error_if_any;
  Mgmtd__YangDataReply *data;
};
#define MGMTD__FE_GET_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_get_reply__descriptor) \
    , 0, 0, MGMTD__DATASTORE_ID__DS_NONE, 0, 0, NULL, NULL }


struct  _Mgmtd__FeNotifyDataReq
{
  ProtobufCMessage base;
  size_t n_data;
  Mgmtd__YangData **data;
};
#define MGMTD__FE_NOTIFY_DATA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_notify_data_req__descriptor) \
    , 0,NULL }


struct  _Mgmtd__FeRegisterNotifyReq
{
  ProtobufCMessage base;
  uint64_t session_id;
  Mgmtd__DatastoreId ds_id;
  protobuf_c_boolean register_req;
  uint64_t req_id;
  size_t n_data_xpath;
  Mgmtd__YangDataXPath **data_xpath;
};
#define MGMTD__FE_REGISTER_NOTIFY_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_register_notify_req__descriptor) \
    , 0, MGMTD__DATASTORE_ID__DS_NONE, 0, 0, 0,NULL }


typedef enum {
  MGMTD__FE_MESSAGE__MESSAGE__NOT_SET = 0,
  MGMTD__FE_MESSAGE__MESSAGE_REGISTER_REQ = 2,
  MGMTD__FE_MESSAGE__MESSAGE_SESSION_REQ = 3,
  MGMTD__FE_MESSAGE__MESSAGE_SESSION_REPLY = 4,
  MGMTD__FE_MESSAGE__MESSAGE_LOCKDS_REQ = 5,
  MGMTD__FE_MESSAGE__MESSAGE_LOCKDS_REPLY = 6,
  MGMTD__FE_MESSAGE__MESSAGE_SETCFG_REQ = 7,
  MGMTD__FE_MESSAGE__MESSAGE_SETCFG_REPLY = 8,
  MGMTD__FE_MESSAGE__MESSAGE_COMMCFG_REQ = 9,
  MGMTD__FE_MESSAGE__MESSAGE_COMMCFG_REPLY = 10,
  MGMTD__FE_MESSAGE__MESSAGE_GET_REQ = 11,
  MGMTD__FE_MESSAGE__MESSAGE_GET_REPLY = 12,
  MGMTD__FE_MESSAGE__MESSAGE_NOTIFY_DATA_REQ = 15,
  MGMTD__FE_MESSAGE__MESSAGE_REGNOTIFY_REQ = 16
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MGMTD__FE_MESSAGE__MESSAGE)
} Mgmtd__FeMessage__MessageCase;

struct  _Mgmtd__FeMessage
{
  ProtobufCMessage base;
  Mgmtd__FeMessage__MessageCase message_case;
  union {
    Mgmtd__FeRegisterReq *register_req;
    Mgmtd__FeSessionReq *session_req;
    Mgmtd__FeSessionReply *session_reply;
    Mgmtd__FeLockDsReq *lockds_req;
    Mgmtd__FeLockDsReply *lockds_reply;
    Mgmtd__FeSetConfigReq *setcfg_req;
    Mgmtd__FeSetConfigReply *setcfg_reply;
    Mgmtd__FeCommitConfigReq *commcfg_req;
    Mgmtd__FeCommitConfigReply *commcfg_reply;
    Mgmtd__FeGetReq *get_req;
    Mgmtd__FeGetReply *get_reply;
    Mgmtd__FeNotifyDataReq *notify_data_req;
    Mgmtd__FeRegisterNotifyReq *regnotify_req;
  };
};
#define MGMTD__FE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mgmtd__fe_message__descriptor) \
    , MGMTD__FE_MESSAGE__MESSAGE__NOT_SET, {0} }


/* Mgmtd__YangDataXPath methods */
void   mgmtd__yang_data_xpath__init
                     (Mgmtd__YangDataXPath         *message);
size_t mgmtd__yang_data_xpath__get_packed_size
                     (const Mgmtd__YangDataXPath   *message);
size_t mgmtd__yang_data_xpath__pack
                     (const Mgmtd__YangDataXPath   *message,
                      uint8_t             *out);
size_t mgmtd__yang_data_xpath__pack_to_buffer
                     (const Mgmtd__YangDataXPath   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__YangDataXPath *
       mgmtd__yang_data_xpath__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__yang_data_xpath__free_unpacked
                     (Mgmtd__YangDataXPath *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__YangDataValue methods */
void   mgmtd__yang_data_value__init
                     (Mgmtd__YangDataValue         *message);
size_t mgmtd__yang_data_value__get_packed_size
                     (const Mgmtd__YangDataValue   *message);
size_t mgmtd__yang_data_value__pack
                     (const Mgmtd__YangDataValue   *message,
                      uint8_t             *out);
size_t mgmtd__yang_data_value__pack_to_buffer
                     (const Mgmtd__YangDataValue   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__YangDataValue *
       mgmtd__yang_data_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__yang_data_value__free_unpacked
                     (Mgmtd__YangDataValue *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__YangData methods */
void   mgmtd__yang_data__init
                     (Mgmtd__YangData         *message);
size_t mgmtd__yang_data__get_packed_size
                     (const Mgmtd__YangData   *message);
size_t mgmtd__yang_data__pack
                     (const Mgmtd__YangData   *message,
                      uint8_t             *out);
size_t mgmtd__yang_data__pack_to_buffer
                     (const Mgmtd__YangData   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__YangData *
       mgmtd__yang_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__yang_data__free_unpacked
                     (Mgmtd__YangData *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__YangCfgDataReq methods */
void   mgmtd__yang_cfg_data_req__init
                     (Mgmtd__YangCfgDataReq         *message);
size_t mgmtd__yang_cfg_data_req__get_packed_size
                     (const Mgmtd__YangCfgDataReq   *message);
size_t mgmtd__yang_cfg_data_req__pack
                     (const Mgmtd__YangCfgDataReq   *message,
                      uint8_t             *out);
size_t mgmtd__yang_cfg_data_req__pack_to_buffer
                     (const Mgmtd__YangCfgDataReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__YangCfgDataReq *
       mgmtd__yang_cfg_data_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__yang_cfg_data_req__free_unpacked
                     (Mgmtd__YangCfgDataReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__YangGetDataReq methods */
void   mgmtd__yang_get_data_req__init
                     (Mgmtd__YangGetDataReq         *message);
size_t mgmtd__yang_get_data_req__get_packed_size
                     (const Mgmtd__YangGetDataReq   *message);
size_t mgmtd__yang_get_data_req__pack
                     (const Mgmtd__YangGetDataReq   *message,
                      uint8_t             *out);
size_t mgmtd__yang_get_data_req__pack_to_buffer
                     (const Mgmtd__YangGetDataReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__YangGetDataReq *
       mgmtd__yang_get_data_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__yang_get_data_req__free_unpacked
                     (Mgmtd__YangGetDataReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeSubscribeReq methods */
void   mgmtd__be_subscribe_req__init
                     (Mgmtd__BeSubscribeReq         *message);
size_t mgmtd__be_subscribe_req__get_packed_size
                     (const Mgmtd__BeSubscribeReq   *message);
size_t mgmtd__be_subscribe_req__pack
                     (const Mgmtd__BeSubscribeReq   *message,
                      uint8_t             *out);
size_t mgmtd__be_subscribe_req__pack_to_buffer
                     (const Mgmtd__BeSubscribeReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeSubscribeReq *
       mgmtd__be_subscribe_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_subscribe_req__free_unpacked
                     (Mgmtd__BeSubscribeReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeSubscribeReply methods */
void   mgmtd__be_subscribe_reply__init
                     (Mgmtd__BeSubscribeReply         *message);
size_t mgmtd__be_subscribe_reply__get_packed_size
                     (const Mgmtd__BeSubscribeReply   *message);
size_t mgmtd__be_subscribe_reply__pack
                     (const Mgmtd__BeSubscribeReply   *message,
                      uint8_t             *out);
size_t mgmtd__be_subscribe_reply__pack_to_buffer
                     (const Mgmtd__BeSubscribeReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeSubscribeReply *
       mgmtd__be_subscribe_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_subscribe_reply__free_unpacked
                     (Mgmtd__BeSubscribeReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeTxnReq methods */
void   mgmtd__be_txn_req__init
                     (Mgmtd__BeTxnReq         *message);
size_t mgmtd__be_txn_req__get_packed_size
                     (const Mgmtd__BeTxnReq   *message);
size_t mgmtd__be_txn_req__pack
                     (const Mgmtd__BeTxnReq   *message,
                      uint8_t             *out);
size_t mgmtd__be_txn_req__pack_to_buffer
                     (const Mgmtd__BeTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeTxnReq *
       mgmtd__be_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_txn_req__free_unpacked
                     (Mgmtd__BeTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeTxnReply methods */
void   mgmtd__be_txn_reply__init
                     (Mgmtd__BeTxnReply         *message);
size_t mgmtd__be_txn_reply__get_packed_size
                     (const Mgmtd__BeTxnReply   *message);
size_t mgmtd__be_txn_reply__pack
                     (const Mgmtd__BeTxnReply   *message,
                      uint8_t             *out);
size_t mgmtd__be_txn_reply__pack_to_buffer
                     (const Mgmtd__BeTxnReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeTxnReply *
       mgmtd__be_txn_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_txn_reply__free_unpacked
                     (Mgmtd__BeTxnReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeCfgDataCreateReq methods */
void   mgmtd__be_cfg_data_create_req__init
                     (Mgmtd__BeCfgDataCreateReq         *message);
size_t mgmtd__be_cfg_data_create_req__get_packed_size
                     (const Mgmtd__BeCfgDataCreateReq   *message);
size_t mgmtd__be_cfg_data_create_req__pack
                     (const Mgmtd__BeCfgDataCreateReq   *message,
                      uint8_t             *out);
size_t mgmtd__be_cfg_data_create_req__pack_to_buffer
                     (const Mgmtd__BeCfgDataCreateReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeCfgDataCreateReq *
       mgmtd__be_cfg_data_create_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_cfg_data_create_req__free_unpacked
                     (Mgmtd__BeCfgDataCreateReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeCfgDataCreateReply methods */
void   mgmtd__be_cfg_data_create_reply__init
                     (Mgmtd__BeCfgDataCreateReply         *message);
size_t mgmtd__be_cfg_data_create_reply__get_packed_size
                     (const Mgmtd__BeCfgDataCreateReply   *message);
size_t mgmtd__be_cfg_data_create_reply__pack
                     (const Mgmtd__BeCfgDataCreateReply   *message,
                      uint8_t             *out);
size_t mgmtd__be_cfg_data_create_reply__pack_to_buffer
                     (const Mgmtd__BeCfgDataCreateReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeCfgDataCreateReply *
       mgmtd__be_cfg_data_create_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_cfg_data_create_reply__free_unpacked
                     (Mgmtd__BeCfgDataCreateReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeCfgDataApplyReq methods */
void   mgmtd__be_cfg_data_apply_req__init
                     (Mgmtd__BeCfgDataApplyReq         *message);
size_t mgmtd__be_cfg_data_apply_req__get_packed_size
                     (const Mgmtd__BeCfgDataApplyReq   *message);
size_t mgmtd__be_cfg_data_apply_req__pack
                     (const Mgmtd__BeCfgDataApplyReq   *message,
                      uint8_t             *out);
size_t mgmtd__be_cfg_data_apply_req__pack_to_buffer
                     (const Mgmtd__BeCfgDataApplyReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeCfgDataApplyReq *
       mgmtd__be_cfg_data_apply_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_cfg_data_apply_req__free_unpacked
                     (Mgmtd__BeCfgDataApplyReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeCfgDataApplyReply methods */
void   mgmtd__be_cfg_data_apply_reply__init
                     (Mgmtd__BeCfgDataApplyReply         *message);
size_t mgmtd__be_cfg_data_apply_reply__get_packed_size
                     (const Mgmtd__BeCfgDataApplyReply   *message);
size_t mgmtd__be_cfg_data_apply_reply__pack
                     (const Mgmtd__BeCfgDataApplyReply   *message,
                      uint8_t             *out);
size_t mgmtd__be_cfg_data_apply_reply__pack_to_buffer
                     (const Mgmtd__BeCfgDataApplyReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeCfgDataApplyReply *
       mgmtd__be_cfg_data_apply_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_cfg_data_apply_reply__free_unpacked
                     (Mgmtd__BeCfgDataApplyReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__YangDataReply methods */
void   mgmtd__yang_data_reply__init
                     (Mgmtd__YangDataReply         *message);
size_t mgmtd__yang_data_reply__get_packed_size
                     (const Mgmtd__YangDataReply   *message);
size_t mgmtd__yang_data_reply__pack
                     (const Mgmtd__YangDataReply   *message,
                      uint8_t             *out);
size_t mgmtd__yang_data_reply__pack_to_buffer
                     (const Mgmtd__YangDataReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__YangDataReply *
       mgmtd__yang_data_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__yang_data_reply__free_unpacked
                     (Mgmtd__YangDataReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__BeMessage methods */
void   mgmtd__be_message__init
                     (Mgmtd__BeMessage         *message);
size_t mgmtd__be_message__get_packed_size
                     (const Mgmtd__BeMessage   *message);
size_t mgmtd__be_message__pack
                     (const Mgmtd__BeMessage   *message,
                      uint8_t             *out);
size_t mgmtd__be_message__pack_to_buffer
                     (const Mgmtd__BeMessage   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__BeMessage *
       mgmtd__be_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__be_message__free_unpacked
                     (Mgmtd__BeMessage *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeRegisterReq methods */
void   mgmtd__fe_register_req__init
                     (Mgmtd__FeRegisterReq         *message);
size_t mgmtd__fe_register_req__get_packed_size
                     (const Mgmtd__FeRegisterReq   *message);
size_t mgmtd__fe_register_req__pack
                     (const Mgmtd__FeRegisterReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_register_req__pack_to_buffer
                     (const Mgmtd__FeRegisterReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeRegisterReq *
       mgmtd__fe_register_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_register_req__free_unpacked
                     (Mgmtd__FeRegisterReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeSessionReq methods */
void   mgmtd__fe_session_req__init
                     (Mgmtd__FeSessionReq         *message);
size_t mgmtd__fe_session_req__get_packed_size
                     (const Mgmtd__FeSessionReq   *message);
size_t mgmtd__fe_session_req__pack
                     (const Mgmtd__FeSessionReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_session_req__pack_to_buffer
                     (const Mgmtd__FeSessionReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeSessionReq *
       mgmtd__fe_session_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_session_req__free_unpacked
                     (Mgmtd__FeSessionReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeSessionReply methods */
void   mgmtd__fe_session_reply__init
                     (Mgmtd__FeSessionReply         *message);
size_t mgmtd__fe_session_reply__get_packed_size
                     (const Mgmtd__FeSessionReply   *message);
size_t mgmtd__fe_session_reply__pack
                     (const Mgmtd__FeSessionReply   *message,
                      uint8_t             *out);
size_t mgmtd__fe_session_reply__pack_to_buffer
                     (const Mgmtd__FeSessionReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeSessionReply *
       mgmtd__fe_session_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_session_reply__free_unpacked
                     (Mgmtd__FeSessionReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeLockDsReq methods */
void   mgmtd__fe_lock_ds_req__init
                     (Mgmtd__FeLockDsReq         *message);
size_t mgmtd__fe_lock_ds_req__get_packed_size
                     (const Mgmtd__FeLockDsReq   *message);
size_t mgmtd__fe_lock_ds_req__pack
                     (const Mgmtd__FeLockDsReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_lock_ds_req__pack_to_buffer
                     (const Mgmtd__FeLockDsReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeLockDsReq *
       mgmtd__fe_lock_ds_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_lock_ds_req__free_unpacked
                     (Mgmtd__FeLockDsReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeLockDsReply methods */
void   mgmtd__fe_lock_ds_reply__init
                     (Mgmtd__FeLockDsReply         *message);
size_t mgmtd__fe_lock_ds_reply__get_packed_size
                     (const Mgmtd__FeLockDsReply   *message);
size_t mgmtd__fe_lock_ds_reply__pack
                     (const Mgmtd__FeLockDsReply   *message,
                      uint8_t             *out);
size_t mgmtd__fe_lock_ds_reply__pack_to_buffer
                     (const Mgmtd__FeLockDsReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeLockDsReply *
       mgmtd__fe_lock_ds_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_lock_ds_reply__free_unpacked
                     (Mgmtd__FeLockDsReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeSetConfigReq methods */
void   mgmtd__fe_set_config_req__init
                     (Mgmtd__FeSetConfigReq         *message);
size_t mgmtd__fe_set_config_req__get_packed_size
                     (const Mgmtd__FeSetConfigReq   *message);
size_t mgmtd__fe_set_config_req__pack
                     (const Mgmtd__FeSetConfigReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_set_config_req__pack_to_buffer
                     (const Mgmtd__FeSetConfigReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeSetConfigReq *
       mgmtd__fe_set_config_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_set_config_req__free_unpacked
                     (Mgmtd__FeSetConfigReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeSetConfigReply methods */
void   mgmtd__fe_set_config_reply__init
                     (Mgmtd__FeSetConfigReply         *message);
size_t mgmtd__fe_set_config_reply__get_packed_size
                     (const Mgmtd__FeSetConfigReply   *message);
size_t mgmtd__fe_set_config_reply__pack
                     (const Mgmtd__FeSetConfigReply   *message,
                      uint8_t             *out);
size_t mgmtd__fe_set_config_reply__pack_to_buffer
                     (const Mgmtd__FeSetConfigReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeSetConfigReply *
       mgmtd__fe_set_config_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_set_config_reply__free_unpacked
                     (Mgmtd__FeSetConfigReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeCommitConfigReq methods */
void   mgmtd__fe_commit_config_req__init
                     (Mgmtd__FeCommitConfigReq         *message);
size_t mgmtd__fe_commit_config_req__get_packed_size
                     (const Mgmtd__FeCommitConfigReq   *message);
size_t mgmtd__fe_commit_config_req__pack
                     (const Mgmtd__FeCommitConfigReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_commit_config_req__pack_to_buffer
                     (const Mgmtd__FeCommitConfigReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeCommitConfigReq *
       mgmtd__fe_commit_config_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_commit_config_req__free_unpacked
                     (Mgmtd__FeCommitConfigReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeCommitConfigReply methods */
void   mgmtd__fe_commit_config_reply__init
                     (Mgmtd__FeCommitConfigReply         *message);
size_t mgmtd__fe_commit_config_reply__get_packed_size
                     (const Mgmtd__FeCommitConfigReply   *message);
size_t mgmtd__fe_commit_config_reply__pack
                     (const Mgmtd__FeCommitConfigReply   *message,
                      uint8_t             *out);
size_t mgmtd__fe_commit_config_reply__pack_to_buffer
                     (const Mgmtd__FeCommitConfigReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeCommitConfigReply *
       mgmtd__fe_commit_config_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_commit_config_reply__free_unpacked
                     (Mgmtd__FeCommitConfigReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeGetReq methods */
void   mgmtd__fe_get_req__init
                     (Mgmtd__FeGetReq         *message);
size_t mgmtd__fe_get_req__get_packed_size
                     (const Mgmtd__FeGetReq   *message);
size_t mgmtd__fe_get_req__pack
                     (const Mgmtd__FeGetReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_get_req__pack_to_buffer
                     (const Mgmtd__FeGetReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeGetReq *
       mgmtd__fe_get_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_get_req__free_unpacked
                     (Mgmtd__FeGetReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeGetReply methods */
void   mgmtd__fe_get_reply__init
                     (Mgmtd__FeGetReply         *message);
size_t mgmtd__fe_get_reply__get_packed_size
                     (const Mgmtd__FeGetReply   *message);
size_t mgmtd__fe_get_reply__pack
                     (const Mgmtd__FeGetReply   *message,
                      uint8_t             *out);
size_t mgmtd__fe_get_reply__pack_to_buffer
                     (const Mgmtd__FeGetReply   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeGetReply *
       mgmtd__fe_get_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_get_reply__free_unpacked
                     (Mgmtd__FeGetReply *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeNotifyDataReq methods */
void   mgmtd__fe_notify_data_req__init
                     (Mgmtd__FeNotifyDataReq         *message);
size_t mgmtd__fe_notify_data_req__get_packed_size
                     (const Mgmtd__FeNotifyDataReq   *message);
size_t mgmtd__fe_notify_data_req__pack
                     (const Mgmtd__FeNotifyDataReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_notify_data_req__pack_to_buffer
                     (const Mgmtd__FeNotifyDataReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeNotifyDataReq *
       mgmtd__fe_notify_data_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_notify_data_req__free_unpacked
                     (Mgmtd__FeNotifyDataReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeRegisterNotifyReq methods */
void   mgmtd__fe_register_notify_req__init
                     (Mgmtd__FeRegisterNotifyReq         *message);
size_t mgmtd__fe_register_notify_req__get_packed_size
                     (const Mgmtd__FeRegisterNotifyReq   *message);
size_t mgmtd__fe_register_notify_req__pack
                     (const Mgmtd__FeRegisterNotifyReq   *message,
                      uint8_t             *out);
size_t mgmtd__fe_register_notify_req__pack_to_buffer
                     (const Mgmtd__FeRegisterNotifyReq   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeRegisterNotifyReq *
       mgmtd__fe_register_notify_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_register_notify_req__free_unpacked
                     (Mgmtd__FeRegisterNotifyReq *message,
                      ProtobufCAllocator *allocator);
/* Mgmtd__FeMessage methods */
void   mgmtd__fe_message__init
                     (Mgmtd__FeMessage         *message);
size_t mgmtd__fe_message__get_packed_size
                     (const Mgmtd__FeMessage   *message);
size_t mgmtd__fe_message__pack
                     (const Mgmtd__FeMessage   *message,
                      uint8_t             *out);
size_t mgmtd__fe_message__pack_to_buffer
                     (const Mgmtd__FeMessage   *message,
                      ProtobufCBuffer     *buffer);
Mgmtd__FeMessage *
       mgmtd__fe_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mgmtd__fe_message__free_unpacked
                     (Mgmtd__FeMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Mgmtd__YangDataXPath_Closure)
                 (const Mgmtd__YangDataXPath *message,
                  void *closure_data);
typedef void (*Mgmtd__YangDataValue_Closure)
                 (const Mgmtd__YangDataValue *message,
                  void *closure_data);
typedef void (*Mgmtd__YangData_Closure)
                 (const Mgmtd__YangData *message,
                  void *closure_data);
typedef void (*Mgmtd__YangCfgDataReq_Closure)
                 (const Mgmtd__YangCfgDataReq *message,
                  void *closure_data);
typedef void (*Mgmtd__YangGetDataReq_Closure)
                 (const Mgmtd__YangGetDataReq *message,
                  void *closure_data);
typedef void (*Mgmtd__BeSubscribeReq_Closure)
                 (const Mgmtd__BeSubscribeReq *message,
                  void *closure_data);
typedef void (*Mgmtd__BeSubscribeReply_Closure)
                 (const Mgmtd__BeSubscribeReply *message,
                  void *closure_data);
typedef void (*Mgmtd__BeTxnReq_Closure)
                 (const Mgmtd__BeTxnReq *message,
                  void *closure_data);
typedef void (*Mgmtd__BeTxnReply_Closure)
                 (const Mgmtd__BeTxnReply *message,
                  void *closure_data);
typedef void (*Mgmtd__BeCfgDataCreateReq_Closure)
                 (const Mgmtd__BeCfgDataCreateReq *message,
                  void *closure_data);
typedef void (*Mgmtd__BeCfgDataCreateReply_Closure)
                 (const Mgmtd__BeCfgDataCreateReply *message,
                  void *closure_data);
typedef void (*Mgmtd__BeCfgDataApplyReq_Closure)
                 (const Mgmtd__BeCfgDataApplyReq *message,
                  void *closure_data);
typedef void (*Mgmtd__BeCfgDataApplyReply_Closure)
                 (const Mgmtd__BeCfgDataApplyReply *message,
                  void *closure_data);
typedef void (*Mgmtd__YangDataReply_Closure)
                 (const Mgmtd__YangDataReply *message,
                  void *closure_data);
typedef void (*Mgmtd__BeMessage_Closure)
                 (const Mgmtd__BeMessage *message,
                  void *closure_data);
typedef void (*Mgmtd__FeRegisterReq_Closure)
                 (const Mgmtd__FeRegisterReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeSessionReq_Closure)
                 (const Mgmtd__FeSessionReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeSessionReply_Closure)
                 (const Mgmtd__FeSessionReply *message,
                  void *closure_data);
typedef void (*Mgmtd__FeLockDsReq_Closure)
                 (const Mgmtd__FeLockDsReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeLockDsReply_Closure)
                 (const Mgmtd__FeLockDsReply *message,
                  void *closure_data);
typedef void (*Mgmtd__FeSetConfigReq_Closure)
                 (const Mgmtd__FeSetConfigReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeSetConfigReply_Closure)
                 (const Mgmtd__FeSetConfigReply *message,
                  void *closure_data);
typedef void (*Mgmtd__FeCommitConfigReq_Closure)
                 (const Mgmtd__FeCommitConfigReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeCommitConfigReply_Closure)
                 (const Mgmtd__FeCommitConfigReply *message,
                  void *closure_data);
typedef void (*Mgmtd__FeGetReq_Closure)
                 (const Mgmtd__FeGetReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeGetReply_Closure)
                 (const Mgmtd__FeGetReply *message,
                  void *closure_data);
typedef void (*Mgmtd__FeNotifyDataReq_Closure)
                 (const Mgmtd__FeNotifyDataReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeRegisterNotifyReq_Closure)
                 (const Mgmtd__FeRegisterNotifyReq *message,
                  void *closure_data);
typedef void (*Mgmtd__FeMessage_Closure)
                 (const Mgmtd__FeMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    mgmtd__cfg_data_req_type__descriptor;
extern const ProtobufCEnumDescriptor    mgmtd__datastore_id__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__yang_data_xpath__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__yang_data_value__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__yang_data__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__yang_cfg_data_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__yang_get_data_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_subscribe_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_subscribe_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_txn_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_txn_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_cfg_data_create_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_cfg_data_create_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_cfg_data_apply_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_cfg_data_apply_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__yang_data_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__be_message__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_register_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_session_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_session_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_lock_ds_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_lock_ds_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_set_config_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_set_config_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_commit_config_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_commit_config_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_get_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_get_reply__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_notify_data_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_register_notify_req__descriptor;
extern const ProtobufCMessageDescriptor mgmtd__fe_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_lib_2fmgmt_2eproto__INCLUDED */
